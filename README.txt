			Задача "читатели - писатели".
В поставленной задаче существуют два вида потоков: потребители
(или «читателями»), которые только читают данные, и производители,
которые модифицируют данные (или «писателями»).
Потоки-читатели не меняют содержимого базы данных, поэтому
несколько таких потоков могут обращаться к такой базе данных
одновременно. Поток-писатель может изменять данные в базе, и поэтому
он должен обладать к ней исключительным, монопольным доступом. Пока
с базой данных работает писатель - никакие другие потоки (и писатели и
читатели) работать с базой данных не должны. Такой режим монопольного
доступа организуется для отдельных записей баз данных, а не для базы
данных целиком. Таким образом, должны выполняться следующие
правила:
1) когда один поток пишет в область общих данных — другие потоки не
могут ни считывать, ни записывать в эту область;
2) когда один поток читает из области общих данных — другие потоки
не могут туда ничего записывать, но могут читать данные.

В программе реализован Монитор Хоара (механизм организации параллелизма),
поток, желающий получить доступ к разделяемым переменным, должен 
обратиться к монитору, который либо предоставит доступ, либо откажет в нем. 
Потокам, которые хотят войти в монитор, когда он уже занят, приходится 
ждать, причем режимом ожидания автоматически управляет сам монитор.
При отказе в доступе монитор блокирует обратившийся к нему
поток и определяет условие, по которому поток ждет. Проверка
условия выполняется самим монитором, который и деблокирует
ожидающий поток. Поскольку механизм монитора гарантирует
взаимоисключение потоков, отсутствуют серьезные проблемы,
связанные с организацией параллельных взаимодействующих потоков.

Для работы с монитором создаются параллельные потоки, имитирующие 
работу писателей и читателей. Количество писателей определяется 
переменной NumWriters, количество читателей - переменной NumReaders.
В качестве разделяемого ресурса выступает целочисленная
переменная SHARED_RESOURCE. При каждом обращении к ней читатели должны
считывать ее значение, а писатели увеличивать её на единицу. Считывание
проходит одновременно всеми читателями, а запись может выполняться
только одним писателем в порядке очереди.
Для доступа к разделяемой переменной (SHARED_RESOURCE) в программе будут
использованы события (Event). Для читателей это CanRead (со
сбросом вручную), а для писателей - CanWrite (с автоматическим
сбросом). Читатели будут ожидать завершение работы всех ждущих
писателей (функция BeginRead), а писатели будут ожидать как завершение
работы читателей, так и завершение работы писателей, стоящих в очереди
(функция BeginWrite).
В программе используется мьютекс MUTEX для защиты разделяемого ресурса Stop.
Функции EndRead и EndWrite осуществляют проверки состояния
монитора на момент завершения операций считывания или записи
ресурсов и, инициируют соответствующие события (функции SetEvent),
которые запускают потоки, ожидающие в очереди.
Программа завершает свою работу при условии, что разделяемая переменная
SHARED_RESOURCE достигла максимального значения MAX_VAL и переменная Stop
имеет значение 1.
